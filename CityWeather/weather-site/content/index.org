#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil expand-links:t f:t
#+options: inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Proyecto ICCD32 Arquitectura de Computadores
#+date: 2025-02-07
#+author: Lorena Lopez, Matthew Cedeño.
#+email: elizabeth.lopez@epn.edu.ec , matthew.cedeño@epn.edu.ec 
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.7.5)
#+cite_export:

* City Weather APP
Este es el proyecto de fin de semestre en donde se pretende demostrar
las destrezas obtenidas durante el transcurso de la asignatura de
**Arquitectura de Computadores**.

1. Conocimientos de sistema operativo Linux
2. Conocimientos de Emacs/Jupyter
3. Configuración de Entorno para Data Science con Mamba/Anaconda
4. Literate Programming
 
** Estructura del proyecto

#+begin_example
.
├── CityTemperatureAnalysis.ipynb
├── clima-quito-hoy.csv
├── get-weather.sh
├── main.py
├── output.log
└── weather-site
    ├── build-site.el
    ├── build.sh
    ├── content
    │   ├── images
    │   │   ├── plot.png
    │   │   └── temperature.png
    │   ├── index.org
    │   └── index.org_archive
    └── public
        ├── images
        │   ├── plot.png
        │   └── temperature.png
        ├── index.html
        

5 directories, 18 files
#+end_example

#+begin_src shell :results output :exports both
mkdir CityWeather
cd CityWeather
pwd
#+end_src

#+RESULTS:
: /home/lorenalopez/CityWeather

#+begin_src shell :results output :exports results
cd /home/lorenalopez
mkdir -p CityWeather/weather-site
cd CityWeather
pwd
#+end_src

#+RESULTS:
: /home/lorenalopez/CityWeather

#+begin_src shell :results output :exports both
cd /home/lorenalopez
mkdir -p CityWeather/weather-site/content
cd CityWeather
#+end_src
#+RESULTS:
: /home/lorenalopez/CityWeather/weather-site/content

#+begin_src shell :results output :exports both
cd /home/lorenalopez
mkdir -p CityWeather/weather-site/public
cd CityWeather
#+end_src
#+RESULTS:
: /home/lorenalopez/CityWeather/weather-site/public

#+begin_src shell :results output :exports both
cd /home/lorenalopez
mkdir -p CityWeather/weather-site/content/images
cd CityWeather
#+end_src
#+RESULTS:
: /home/lorenalopez/CityWeather/weather-site/content/images

#+begin_src shell :results output :exports both
cd /home/lorenalopez
mkdir -p CityWeather/weather-site/public/images
cd CityWeather
#+end_src
#+RESULTS:
: /home/lorenalopez/CityWeather/weather-site/public/images

** Descripción del código

*** Código Python 

** 1. Configuración de Constantes

#+begin_src python

MADRID_LAT = 40.4168  # Latitud de Madrid
MADRID_LONGITUDE = -3.7038  # Longitud de Madrid
API_KEY = "dd272e4e6c6073d32fc685ff8dc91569"
FILE_NAME = "/home/lorenalopez/CityWeather/clima-madrid-hoy.csv"
#+end_src

#+RESULTS:
: None

Define las constantes necesarias para la solicitud a la API, incluyendo las coordenadas de la ciudad, la clave API y el nombre del archivo CSV donde se guardarán los datos.

** 2. Función get_weather

#+begin_src python
def get_weather(lat, lon, api):
url = f"http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api}&units=metric"
response = requests.get(url)
if response.status_code == 200:
return response.json()
else:
return {"cod": response.status_code}
#+end_src

#+RESULTS:

Construye la URL para la solicitud a la API y realiza una solicitud GET. Devuelve la respuesta en formato JSON si la solicitud es exitosa, o un diccionario con el código de error si la solicitud falla.

** 3. Función process

#+begin_src python
def process(json):
normalized_dict = {
"Fecha": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
"Temperatura": json["main"]["temp"],
"Humedad": json["main"]["humidity"],
"Presión": json["main"]["pressure"],
"Velocidad del viento": json["wind"]["speed"],
"dt": json.get("dt", "N/A"),
"coord_lon": json["coord"].get("lon", "N/A"),
"coord_lat": json["coord"].get("lat", "N/A"),
"weather_0_id": json["weather"][0].get("id", "N/A"),
"weather_0_main": json["weather"][0].get("main", "N/A"),
"weather_0_description": json["weather"][0].get("description", "N/A"),
"weather_0_icon": json["weather"][0].get("icon", "N/A"),
"base": json.get("base", "N/A"),
"main_temp": json["main"].get("temp", "N/A"),
"main_feels_like": json["main"].get("feels_like", "N/A"),
"visibility": json.get("visibility", "N/A"),
"wind_speed": json["wind"].get("speed", "N/A"),
"wind_deg": json["wind"].get("deg", "N/A"),
"clouds_all": json.get("clouds", {}).get("all", "N/A"),
"sys_type": json.get("sys", {}).get("type", "N/A"),
"sys_id": json.get("sys", {}).get("id", "N/A"),
"sys_country": json.get("sys", {}).get("country", "N/A"),
"sys_sunrise": json.get("sys", {}).get("sunrise", "N/A"),
"sys_sunset": json.get("sys", {}).get("sunset", "N/A"),
"timezone": json.get("timezone", "N/A"),
"id": json.get("id", "N/A"),
"name": json.get("name", "N/A"),
"cod": json.get("cod", "N/A"),
}
return normalized_dict
#+end_src

Normaliza los datos JSON obtenidos de la API en un diccionario con campos estándar para ser guardados en el archivo CSV. Incluye la fecha y hora actuales y maneja posibles valores ausentes.

** 4. Función write2csv

#+begin_src python
def write2csv(json_response, csv_filename):
fieldnames = [
"Fecha", "Temperatura", "Humedad", "Presión", "Velocidad del viento",
"dt", "coord_lon", "coord_lat", "weather_0_id", "weather_0_main",
"weather_0_description", "weather_0_icon", "base", "main_temp",
"main_feels_like", "visibility", "wind_speed", "wind_deg",
"clouds_all", "sys_type", "sys_id", "sys_country", "sys_sunrise",
"sys_sunset", "timezone", "id", "name", "cod"
]
#+end_src

** 5. Función main

#+begin_src python
def main():
    print("===== Bienvenido a Madrid-Clima =====")
    madrid_weather = get_weather(lat=MADRID_LAT, lon=MADRID_LONGITUDE, api=API_KEY)
    
    if madrid_weather['cod'] != 404:
        processed_weather = process(madrid_weather)
        write2csv(processed_weather, FILE_NAME)
        print("Datos climatológicos guardados correctamente en", FILE_NAME)
    else:
        print("Ciudad no disponible o API KEY no válida")

if __name__ == '__main__':
    main()
#+end_src

Es el punto de entrada del script. Imprime un mensaje de bienvenida, obtiene los datos meteorológicos, los procesa y los guarda en el archivo CSV. Maneja errores en caso de que la ciudad no esté disponible o la clave de API sea inválida.


** Script ejecutable sh


#+begin_src shell :results output :exports both
which sh
#+end_src

#+RESULTS:
: /usr/bin/sh

#+begin_src shell :results output :exports both
which mamba
#+end_src

#+RESULTS:
: /home/lorenalopez/miniforge3/bin/mamba

#+begin_src shell :results output :exports both
touch ~/CityWeather/get-weather.sh
ls -l ~/CityWeather/get-weather.sh  # Verifica que se haya creado
#+end_src

#+RESULTS:
: -rw-r--r-- 1 lorenalopez lorenalopez 0 Feb  7 21:26 /home/lorenalopez/CityWeather/get-weather.sh


#+begin_src shell :results output :exports both
echo '#!/usr/bin/sh' > ~/CityWeather/get-weather.sh
echo 'source /home/lorenalopez/miniforge3/etc/profile.d/conda.sh' >> ~/CityWeather/get-weather.sh
echo 'eval "$(conda shell.bash hook)"' >> ~/CityWeather/get-weather.sh
echo 'conda activate iccd332' >> ~/CityWeather/get-weather.sh
echo 'python /home/lorenalopez/CityWeather/main.py' >> ~/CityWeather/get-weather.sh
cat ~/CityWeather/get-weather.sh  # Muestra el contenido
#+end_src

#+RESULTS:
: #!/usr/bin/sh
: source /home/lorenalopez/miniforge3/etc/profile.d/conda.sh
: eval "$(conda shell.bash hook)"
: conda activate iccd332
: python /home/lorenalopez/CityWeather/main.py


#+begin_src shell :results output :exports both
chmod +x ~/CityWeather/get-weather.sh
ls -l ~/CityWeather/get-weather.sh  # Verifica los permisos
#+end_src

#+RESULTS:
: -rwxr-xr-x 1 lorenalopez lorenalopez 173 Feb  7 22:27 /home/lorenalopez/CityWeather/get-weather.sh

#+begin_src shell :results output :exports both
~/CityWeather/get-weather.sh
#+end_src

#+RESULTS:
: ===== Bienvenido a Madrid-Clima =====
: Datos climatológicos guardados correctamente en /home/lorenalopez/CityWeather/clima-madrid-hoy.csv


#+begin_src shell :results output :exports both
chmod +x /home/lorenalopez/CityWeather/get-weather.sh
#+end_src

#+RESULTS:

#+begin_src shell :results output :exports both
ls -l /home/lorenalopez/CityWeather/get-weather.sh #para verificar
#+end_src

#+RESULTS:
: -rwxr-xr-x 1 lorenalopez lorenalopez 173 Feb  7 22:27 /home/lorenalopez/CityWeather/get-weather.sh


** Configuración de Crontab
Se indica la configuración realizada en crontab para la adquisición de datos

#+begin_src shell
*/15 * * * * /usr/bin/python3 /home/lorenalopez/CityWeather/main.py >> /home/lorenalopez/CityWeather/output.log 2>&1
#+end_src

#+RESULTS:

- Recuerde remplazar <City> por el nombre de la ciudad que analice
- Recuerde ajustar el tiempo para potenciar tomar datos nuevos
- Recuerde que ~2>&1~ permite guardar en ~output.log~ tanto la salida
  del programa como los errores en la ejecución.
* Presentación de resultados
Para la pressentación de resultados se utilizan las librerías de Python:
- matplotlib
- pandas

Alternativamente como pudo estudiar en el Jupyter Notebook
[[https://github.com/LeninGF/EPN-Lectures/blob/main/iccd332ArqComp-2024-A/Proyectos/CityWeather/CityTemperatureAnalysis.ipynb][CityTemperatureAnalysis.ipynb]], existen librerías alternativas que se
pueden utilizar para presentar los resultados gráficos. En ambos
casos, para que funcione los siguientes bloques de código, es
necesario que realice la instalación de los paquetes usando ~mamba
install <nombre-paquete>~

** Muestra Aleatoria de datos

Presentar una muestra de 10 valores aleatorios de los datos obtenidos.
#+caption: Lectura de archivo csv
#+begin_src python :session :results output exports both
import os
import pandas as pd
# lectura del archivo csv obtenido
df = pd.read_csv('/home/lorenalopez/CityWeather/clima-madrid-hoy.csv')
# se imprime la estructura del dataframe en forma de filas x columnas
print(df.shape)
#+end_src

#+RESULTS:
: (67, 28)

Resultado del número de filas y columnas leídos del archivo csv.


** TABLA

#+begin_src python :session :exports both :results value table :return table
# Convertir la columna Fecha a datetime si aún no lo está
df["Fecha"] = pd.to_datetime(df["Fecha"], errors="coerce")
# Ordenar por la fecha más reciente
df = df.sort_values("Fecha", ascending=False)
# Seleccionar las últimas 10 filas
table1 = df.head(10)
# Convertir todas las columnas a strings para evitar desalineación
table1 = table1.astype(str)
# Crear la tabla asegurando que las columnas están alineadas
table = [list(table1.columns)] + table1.values.tolist()
table
#+end_src

#+RESULTS:
| Fecha               | Temperatura | Humedad | Presión | Velocidad del viento |         dt | coord_lon | coord_lat | weather_0_id | weather_0_main | weather_0_description | weather_0_icon | base     | main_temp | main_feels_like | visibility | wind_speed | wind_deg | clouds_all | sys_type |  sys_id | sys_country | sys_sunrise | sys_sunset | timezone |      id | name               | cod |
| 2025-02-07 19:15:02 |        5.97 |      95 |    1019 |                 6.17 | 1738973608 |   -3.6989 |   40.4197 |          804 | Clouds         | overcast clouds       |            04n | stations |      5.97 |            2.06 |       9000 |       6.17 |      220 |        100 |        2 | 2084029 | ES          |  1738999014 | 1739036469 |     3600 | 6545095 | Madrid             | 200 |
| 2025-02-07 19:00:02 |         6.1 |      95 |    1019 |                 6.17 | 1738972742 |   -3.7038 |   40.4168 |          804 | Clouds         | overcast clouds       |            04n | stations |       6.1 |            2.23 |       9000 |       6.17 |      220 |        100 |        2 | 2084029 | ES          |  1738999015 | 1739036470 |     3600 | 6545083 | Sol                | 200 |
| 2025-02-07 18:45:02 |         6.1 |      95 |    1019 |                 6.17 | 1738971842 |   -3.7038 |   40.4168 |          804 | Clouds         | overcast clouds       |            04n | stations |       6.1 |            2.23 |       9000 |       6.17 |      220 |        100 |        2 | 2084029 | ES          |  1738999015 | 1739036470 |     3600 | 6545083 | Sol                | 200 |
| 2025-02-07 11:46:01 |         6.8 |      85 |    1017 |                  3.6 | 1738946405 |    -3.702 |   40.4213 |          804 | Clouds         | overcast clouds       |            04d | stations |       6.8 |            4.29 |      10000 |        3.6 |      200 |        100 |        2 | 2084029 | ES          |  1738912682 | 1738949996 |     3600 | 3117735 | Madrid             | 200 |
| 2025-02-07 11:45:02 |         6.6 |      87 |    1017 |                 4.12 | 1738950302 |   -3.7038 |   40.4168 |          804 | Clouds         | overcast clouds       |            04n | stations |       6.6 |            3.76 |      10000 |       4.12 |      180 |        100 |        2 | 2084029 | ES          |  1738912682 | 1738949997 |     3600 | 6545083 | Sol                | 200 |
| 2025-02-07 11:30:02 |         6.6 |      88 |    1017 |                 4.12 | 1738949402 |   -3.7038 |   40.4168 |          804 | Clouds         | overcast clouds       |            04d | stations |       6.6 |            3.76 |      10000 |       4.12 |      160 |        100 |        2 | 2084029 | ES          |  1738912682 | 1738949997 |     3600 | 6545083 | Sol                | 200 |
| 2025-02-07 11:15:02 |        6.63 |      87 |    1017 |                 3.09 | 1738948320 |      -3.7 |     40.42 |          804 | Clouds         | overcast clouds       |            04d | stations |      6.63 |             4.4 |      10000 |       3.09 |      200 |        100 |        2 | 2084029 | ES          |  1738912681 | 1738949995 |     3600 | 6545083 | Sol                | 200 |
| 2025-02-07 10:30:02 |        6.86 |      86 |    1017 |                  3.6 | 1738945664 |   -3.7038 |   40.4168 |          804 | Clouds         | overcast clouds       |            04d | stations |      6.86 |            4.37 |      10000 |        3.6 |      200 |        100 |        2 | 2084029 | ES          |  1738912682 | 1738949997 |     3600 | 6545083 | Sol                | 200 |
| 2025-02-07 10:15:01 |        6.03 |      89 |    1017 |                 3.09 | 1738940904 |   -3.7036 |   40.4167 |          701 | Mist           | mist                  |            50d | stations |      6.03 |            3.68 |       4000 |       3.09 |      200 |        100 |        2 | 2084029 | ES          |  1738912682 | 1738949997 |     3600 | 3117735 | Madrid             | 200 |
| 2025-02-07 10:15:01 |        6.67 |      87 |    1017 |                  3.6 | 1738944526 |   -3.7036 |   40.4167 |          803 | Clouds         | broken clouds         |            04d | stations |      6.67 |            4.13 |      10000 |        3.6 |      190 |         75 |        2 | 2084029 | ES          |  1738912682 | 1738949997 |     3600 | 6544494 | Madrid City Center | 200 |



** Gráfica Temperatura vs Tiempo

Realizar una gráfica de la Temperatura en el tiempo.


El siguiente cógido permite hacer la gráfica de la temperatura vs
tiempo para Org 9.7+. Para saber que versión dispone puede ejecutar
~M-x org-version~

#+begin_src python :results file :exports both :session
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# Convertir la columna dt a formato de fecha si es necesario
df["dt"] = pd.to_datetime(df["dt"], unit="s", errors="coerce")
# Crear la figura con un tamaño adecuado
fig, ax = plt.subplots(figsize=(10, 6))
# Graficar la temperatura vs tiempo con mejor estilo
ax.plot(df["dt"], df["main_temp"], marker="o", linestyle="-", color="red", label="Temperatura")
# Mejorar la visualización del eje X con fechas más legibles
ax.xaxis.set_major_locator(mdates.HourLocator(interval=3))  # Mostrar cada 3 horas
ax.xaxis.set_major_formatter(mdates.DateFormatter("%d-%m %H:%M"))  # Formato: Día-Mes Hora:Minutos
plt.xticks(rotation=45, ha="right")  # Rotar etiquetas para evitar sobreposición
plt.title("Gráfica Temperatura vs Tiempo en Madrid", fontsize=14, fontweight="bold")
plt.xlabel("Fecha y Hora (Hora Local de Madrid)", fontsize=12)
plt.ylabel("Temperatura (°C)", fontsize=12)
plt.grid(True, linestyle="--", alpha=0.7)
plt.legend()
fig.tight_layout()
fname = "/home/lorenalopez/CityWeather/weather-site/content/images/temperature.png"
plt.savefig(fname, dpi=300)
fname
#+end_src

#+RESULTS:
[[file:/home/lorenalopez/CityWeather/weather-site/content/images/temperature.png]]

#+caption: Gráfica Temperatura vs Tiempo
#+RESULTS:

**  Gráfica de Humedad vs tiempo

#+begin_src python :results file :exports both :session
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# Convertir la columna dt a formato de fecha si es necesario
df["dt"] = pd.to_datetime(df["dt"], unit="s", errors="coerce")
# Crear la figura con un tamaño adecuado
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(df["dt"], df["Humedad"], marker="o", linestyle="-", color="blue", label="Humedad (%)")
ax.xaxis.set_major_locator(mdates.HourLocator(interval=3))  # Mostrar cada 3 horas
ax.xaxis.set_major_formatter(mdates.DateFormatter("%d-%m %H:%M"))  # Formato: Día-Mes Hora:Minutos
plt.xticks(rotation=45, ha="right")  # Rotar etiquetas para evitar sobreposición
plt.title("Gráfica Humedad vs Tiempo en Madrid", fontsize=14, fontweight="bold")
plt.xlabel("Fecha y Hora (Hora Local de Madrid)", fontsize=12)
plt.ylabel("Humedad (%)", fontsize=12)
plt.grid(True, linestyle="--", alpha=0.7)
plt.legend()
fig.tight_layout()

fname = "/home/lorenalopez/CityWeather/weather-site/content/images/humedad_vs_tiempo.png"
plt.savefig(fname, dpi=300)
fname
#+end_src

#+RESULTS:
[[file:/home/lorenalopez/CityWeather/weather-site/content/images/humedad_vs_tiempo.png]]

#+caption: Gráfica TemperaturHumedad vs Tiempo
#+RESULTS:


** Mover images a public.

Debido a que el archivo index.org se abre dentro de la carpeta
/content/, y en cambio el servidor http de emacs se ejecuta desde la
carpeta /public/ es necesario copiar el archivo a la ubicación
equivalente en ~/public/images~

Para que las imágenes generadas en content/images estén disponibles en el servidor web
de Emacs, hay que copiarlas a public/images.


#+begin_src shell :results output :exports both
cp -rfv /home/lorenalopez/CityWeather/weather-site/content/images/* /home/lorenalopez/CityWeather/weather-site/public/images/
#+end_src

#+RESULTS:
: '/home/lorenalopez/CityWeather/weather-site/content/images/humedad_vs_tiempo.png' -> '/home/lorenalopez/CityWeather/weather-site/public/images/humedad_vs_tiempo.png'
: '/home/lorenalopez/CityWeather/weather-site/content/images/humedad_vs_tiempo.png:Zone.Identifier' -> '/home/lorenalopez/CityWeather/weather-site/public/images/humedad_vs_tiempo.png:Zone.Identifier'
: '/home/lorenalopez/CityWeather/weather-site/content/images/temperature.png' -> '/home/lorenalopez/CityWeather/weather-site/public/images/temperature.png'
: '/home/lorenalopez/CityWeather/weather-site/content/images/temperature.png:Zone.Identifier' -> '/home/lorenalopez/CityWeather/weather-site/public/images/temperature.png:Zone.Identifier'



#+begin_src python :session :results file :exports both
  import matplotlib.pyplot as plt
  import matplotlib.dates as mdates
  import pandas as pd

** Carga de datos.


Este bloque de código se encarga de generar y actualizar las gráficas de **Temperatura vs Tiempo**
y **Humedad vs Tiempo** utilizando los datos almacenados en el archivo `clima-madrid-hoy.csv`.
Debe ejecutarse cada vez que se desee actualizar las gráficas con los datos más recientes. Si se
cierra Emacs y se vuelve a abrir, es necesario ejecutar nuevamente este bloque para regenerar las
imágenes. Asimismo, si el archivo de datos ha sido modificado, este código asegurará que las
gráficas reflejen la información más actualizada.

#+begin_src python :session :results file :exports both
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd

# Cargar los datos del archivo CSV
df = pd.read_csv('/home/lorenalopez/CityWeather/clima-madrid-hoy.csv')

# Convertir 'dt' a formato de fecha si está en timestamp
df['dt'] = pd.to_datetime(df['dt'], unit='s')

# ----------- Gráfico de Temperatura vs Tiempo -----------
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(df['dt'], df['main_temp'], marker="o", linestyle="-", color="red", label="Temperatura")

# Ajustes del eje X y formato de fechas
ax.xaxis.set_major_locator(mdates.HourLocator(interval=3))
ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m %H:%M'))
plt.xticks(rotation=45, ha="right")

# Etiquetas y cuadrícula
plt.title("Gráfica Temperatura vs Tiempo en Madrid")
plt.xlabel("Fecha y Hora (Hora Local de Madrid)")
plt.ylabel("Temperatura (°C)")
plt.grid(True, linestyle="--", alpha=0.7)
plt.legend()

# Guardar la imagen
fname_temp = '/home/lorenalopez/CityWeather/weather-site/content/images/temperature.png'
plt.savefig(fname_temp, dpi=300)
plt.close(fig)  # Evita que se muestre en Emacs

# ----------- Gráfico de Humedad vs Tiempo -----------
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(df['dt'], df['Humedad'], marker="o", linestyle="-", color="blue", label="Humedad")

# Ajustes del eje X y formato de fechas
ax.xaxis.set_major_locator(mdates.HourLocator(interval=3))
ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m %H:%M'))
plt.xticks(rotation=45, ha="right")

# Etiquetas y cuadrícula
plt.title("Gráfica Humedad vs Tiempo en Madrid")
plt.xlabel("Fecha y Hora (Hora Local de Madrid)")
plt.ylabel("Humedad (%)")
plt.grid(True, linestyle="--", alpha=0.7)
plt.legend()

# Guardar la imagen
fname_hum = '/home/lorenalopez/CityWeather/weather-site/content/images/humedad_vs_tiempo.png'
plt.savefig(fname_hum, dpi=300)
plt.close(fig)  # Evita que se muestre en Emacs

# Devolver las rutas de las imágenes generadas
[fname_temp, fname_hum]
#+end_src

#+RESULTS:
[[file:['/home/lorenalopez/CityWeather/weather-site/content/images/temperature.png', '/home/lorenalopez/CityWeather/weather-site/content/images/humedad_vs_tiempo.png']]]


** Mover las imagenes a public.
#+begin_src shell :results output :exports both
cp -rfv /home/lorenalopez/CityWeather/weather-site/content/images/*.png /home/lorenalopez/CityWeather/weather-site/public/images/
#+end_src

#+RESULTS:
: '/home/lorenalopez/CityWeather/weather-site/content/images/humedad_vs_tiempo.png' -> '/home/lorenalopez/CityWeather/weather-site/public/images/humedad_vs_tiempo.png'
: '/home/lorenalopez/CityWeather/weather-site/content/images/temperature.png' -> '/home/lorenalopez/CityWeather/weather-site/public/images/temperature.png'



* Referencias
- [[https://emacs.stackexchange.com/questions/28715/get-pandas-data-frame-as-a-table-in-org-babel][presentar dataframe como tabla en emacs org]]
- [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][Python Source Code Blocks in Org Mode]]
- [[https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/][Systems Crafters Construir tu sitio web con Modo Emacs Org]]
- [[https://www.youtube.com/watch?v=AfkrzFodoNw][Vídeo Youtube Build Your Website with Org Mode]]

[fn:1] Recuerde que su máquina ha de disponer de un entorno de
anaconda/mamba denominado iccd332 en el cual se dispone del interprete
de Python
